Check for a winning game in Connect 4
=====================================

.. image:: http://gamescrafters.berkeley.edu/games/i/connect4/connect4_04.jpg

Check for two in a row vertically
---------------------------------

1.  Compare every checker on the board on to every other checker on the board
2.  Filter by when the checkers are the same color
3.  And the first checker is is in the same column
4.  And the second checker is exactly one row above the first one

In python, it might look like this::

    s = set()

    for m1 in moves:

        for m2 in moves:

            if m1.color == m2.color \
            and m1.move_column == m2.move_column \
            and m1.move_row + 1 == m2.move_row:

                s.add(m1)

    if s:
        print("we have two in a row!")

If we have 11 moves on the board, then we run that if clause 11 * 11
times.  In other words, this is a O(n^2) algorithm.

Check for four in a row vertically
----------------------------------

Use the same approach, but instead of a double loop, use a quadruple
loop::

    class Move(object):

        def vert_match(self, other):

            if self.color == other.color \
            and self.move_column == other.move_column \
            and self.move_row + 1 == other.move_row:

                return True

    for m1 in moves:
        for m2 in moves:
            for m3 in moves:
                for m4 in moves:

                    if m1.vert_matches(m2) \
                    and m2.vert_matches(m3) \
                    and m3.vert_matches(m4):

                        s.add(m1)

If there are 11 moves on the board, that innermost code runs 11 * 11 *
11 * 11 (14,641) times.

With 16 moves, that's 65k comparisons.

Check 4 in a row vertically, horizontally, and diagonally
---------------------------------------------------------

Add methods for each::

    def horiz_match(self, other):

        """
        (0,0) matches (1, 0)
        """

        if self.color == other.color \
        and self.move_column + 1 == other.move_column \
        and self.move_row == other.move_row:

            return True

    def diag_up_match(self, other):

        """
        (0,0) matches (1, 1)
        """

        if self.color == other.color \
        and self.move_column + 1 == other.move_column \
        and self.move_row + 1 == other.move_row:

            return True

    def diag_dn_match(self, other):

        """
        (0,1) matches (1, 0)
        """

        if self.color == other.color \
        and self.move_column + 1 == other.move_column \
        and self.move_row - 1 == other.move_row:

            return True

Now adjust that innermost block::

    for m1 in moves:
        for m2 in moves:
            for m3 in moves:
                for m4 in moves:

                    if m1.vert_matches(m2) \
                    and m2.vert_matches(m3) \
                    and m3.vert_matches(m4):

                        s.add(m1)

                    elif m1.horiz_matches(m2) \
                    and m2.horiz_matches(m3) \
                    and m3.horiz_matches(m4):

                        s.add(m1)

                    elif m1.diag_up_matches(m2) \
                    and m2.diag_up_matches(m3) \
                    and m3.diag_up_matches(m4):

                        s.add(m1)

                    elif m1.diag_dn_matches(m2) \
                    and m2.diag_dn_matches(m3) \
                    and m3.diag_dn_matches(m4):

                        s.add(m1)

We do more work in that innermost loop, but we'd still call this a
O(n^4) algorithm, because the amount of work doesn't vary with the
amount of input.

Incidental: why is this not OK?
-------------------------------

You might think you want to replace all those if and elif clauses with
just a single function that tests all the ways, like this::

    def match_any(self, other):

        if self.vert_match(other) \
        or self.horiz_match(other) \
        or self.diag_up_match(other) \
        or self.diag_dn_match(other):

            return True

But that will give you false positives!  You could match once
vertically, then the next horizontally.

Python loops vs SQL joins
-------------------------

Just in case it isn't obvious, this python code::

    for m1 in moves:
        for m2 in moves:
            do_something(m1, m2)

and this SQL::

    select do_something(m1.*, m2.*)
    from moves m1
    cross join moves m2

or this old-fashioned style::

    select do_something(m1.*, m2.*)
    from moves m1, moves m2

are all pretty much the same thing, in the sense that do_something(m1, m2)
fires the same number of times in all three scenarios.

Make a simple table to track moves
----------------------------------

::

    create table moves_simple (
        player text,
        move_column integer,
        move_row integer
    );


Write a query to check two in a row vertically
----------------------------------------------

::

    select m1.player, m1.move_column, m1.move_row
    from moves_simple m1
    join moves_simple m2
    on m1.player = m2.player
    and m1.move_column = m2.move_column
    and m1.move_row + 1 = m2.move_row;


Look at the query plan
----------------------

You can (kind of) find out if this is O(n^2) by looking at the query plan::

    # explain analyze select m1.player, m1.move_column, m1.move_row
    from moves_simple m1
    join moves_simple m2
    on m1.player = m2.player
    and m1.move_column = m2.move_column
    and m1.move_row + 1 = m2.move_row;

.. image:: ./images/query-plan-simple-moves.png

These can be dizzying to look at!  You have to read them from the bottom
to the top.  Each line includes the costs of the indented lines below
it.

The very top line shows the expected cost and the actual cost of the
entire query.

A "Seq scan" is when the database checks every row in a table.  In other
words, it does a O(n) operation.

Here's what is happening in there:

1.  The database copies m2 by running a seq scan.
2.  Then it sorts that new copy of m2 on (player, move_column, move_row)
3.  The database seq scans m1 and makes a copy.
4.  Then it sorts that copy of m1 by (player, move_column, move_row).
5.  It merge-joins the two sorted copies together, using the key::

    ((m1.player = m2.player) AND (m1.move_column = m2.move_column) AND (((m1.move_row + 1)) = m2.move_row))

*   Each seq scan costs O(n), but they are not nested one inside the other!
*   Sorting the results of each Seq scan costs O(n * log(n))
*   Merging the results of the sorted costs another O(n * log(n))

So, we have::

    2 * (O(n) + O(n * log(n))) + O(n * log(n))

Which is really just::

    O(n * log(n))


Now add some constraints
------------------------

In real life, I would make the moves table like this::

    create table moves (
        player text not null check (player = 'red' or player = 'black'),
        move_column integer not null check (move_column between 0 and 7),
        move_row integer not null check (move_row between 0 and 6),
        primary key (move_column, move_row)
    );

I just added a bunch of constraints to protect against garbage inputs,
and I added a primary key [#]_.


That primary key improves performance
-------------------------------------

I can use the exact same query::

    # explain analyze select m1.*
    connect4-# from moves m1
    connect4-# cross join moves m2
    connect4-# where m1.player = m2.player
    connect4-# and m1.move_column = m2.move_column
    connect4-# and m1.move_row + 1 = m2.move_row
    connect4-# ;

.. image:: ./images/query-plan-moves.png

Stuff to notice:

*   there's only one seq scan now
*   the expected time fell to 166.92 ms from 190.30

Check for 4 in a row, any direction
-----------------------------------

It looks like this::

    create or replace view winning_games
    as
    select m1.player, m1.move_column, m1.move_row
    from moves m1

    join moves m2
    on m1.player = m2.player

    join moves m3
    on m2.player = m3.player

    join moves m4
    on m3.player = m4.player

    where
    -- vert (column, row) (0, 0) matches (0, 1)
    (
        m1.move_column = m2.move_column
        and m1.move_row + 1 = m2.move_row

        and m2.move_column = m3.move_column
        and m2.move_row + 1 = m3.move_row

        and m3.move_column = m4.move_column
        and m3.move_row + 1 = m4.move_row
    )

    -- horiz (0, 0) matches (1, 0)
    or (

        m1.move_column + 1 = m2.move_column
        and m1.move_row = m2.move_row

        and m2.move_column + 1 = m3.move_column
        and m2.move_row = m3.move_row

        and m3.move_column + 1 = m4.move_column
        and m3.move_row = m4.move_row

    )

    -- diag up (0, 0) matches (1, 1)
    or (

        m1.move_column + 1 = m2.move_column
        and m1.move_row + 1 = m2.move_row

        and m2.move_column + 1 = m3.move_column
        and m2.move_row + 1 = m3.move_row

        and m3.move_column + 1 = m4.move_column
        and m3.move_row + 1 = m4.move_row

    )

    -- diag dn (0, 1) matches (1, 0)
    or (

        m1.move_column + 1 = m2.move_column
        and m1.move_row - 1 = m2.move_row

        and m2.move_column + 1 = m3.move_column
        and m2.move_row - 1 = m3.move_row

        and m3.move_column + 1 = m4.move_column
        and m3.move_row - 1 = m4.move_row

    )
    ;

Comparison: python vs SQL
-------------------------

The python version is O(n^4), but what's the big O of the SQL version?::

    # explain analyze select * from winning_games ;

.. image:: ./images/query-plan-winning-games.png

Beats me!  The query planner does a ton of fancy tricks to minimize the cost of
looking up the data.  But you can see it does two seq scans (m2 and m4), but
not in a nested loop.  And it sorts the data, and, and then merges everything together.

Big O vs SQL query plans: apples and oranges
--------------------------------------------

Big O notation is all about when the size of the data is so big that
constants can be disregarded, and worst-case conditions always apply.

So when you do a query like::

    select *
    from books
    where title = 'abc'
    and price = 99;

If there was an index on title, in the worst case, you would assume that every
book had the title 'abc', so the index is useless, and you might as well just
scan the underlying table.

Database query planners don't work that way.  They keep statistics on
the data and expect those statistics to be predictive.

Incidental: how to not use SQL and not use O(n^4) time
------------------------------------------------------

Really, it's possible to do this check in O(n) time:

*   After each move, check if that move makes two in a row (O(n)).

*   Figure out what direction the line is going (vertical, horizontal,
    diagonal up, diagonal down).

*   Look at the checkers just on either side of the line for three in a
    row.

*   If you find three in a row, look at the checkers on the outside of
    that line.

But then I would lose my example :)

My favorite approach
--------------------

1.  Generate every possible winning game and store them in a hash-indexed
    table.

2.  After every move, compare the board to that indexed table.

Punchlines
----------

*   Database constraints often improve performance dramatically

*   Store big nasty queries in views for easy reuse

.. vim: set syntax=rst:
